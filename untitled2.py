# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DWzusA-l7Kvr4ngBKDqvu2PzvnoYztWJ
"""

pip install pandas scikit-learn

import pandas as pd

# Load dataset
from google.colab import files
uploaded = files.upload()
df = pd.read_csv("movies.csv")
print(df.head())

print(df.columns)

from sklearn.metrics.pairwise import cosine_similarity

# Fill NaN with 0 for similarity calculation
matrix_filled = user_item_matrix.fillna(0)

# Compute similarity between users
similarity = cosine_similarity(matrix_filled)
print("User Similarity Matrix:\n", similarity)

user_item_matrix = df.pivot_table(index="user_id", columns="movie_title", values="rating ")
print(user_item_matrix)

# Example: Recommend for user 1 based on most similar user
import numpy as np

user_index = 0  # user_id = 1
similar_users = similarity[user_index]

# Find the most similar user (excluding self)
most_similar_user = np.argsort(similar_users)[-2]

# Get movies rated by most similar user
recommended_movies = user_item_matrix.iloc[most_similar_user].dropna().index.tolist()
print(f"Recommended movies for User 1: {recommended_movies}")

print(df.head())

genre_map = {
    "Toy Story": "Animation Adventure Children",
    "Jumanji": "Adventure Children Fantasy",
    "Grumpier Old Men": "Comedy Romance"
}

df['genres'] = df['movie_title'].map(genre_map)

df['movie_title'] = df['movie_title'].str.strip().str.replace(r'\s+', ' ', regex=True)

genre_map = {
    "Toy Story": "Animation Adventure Children",
    "Jumanji": "Adventure Children Fantasy",
    "Grumpier Old Men": "Comedy Romance"
}

df['genres'] = df['movie_title'].map(genre_map)

from sklearn.feature_extraction.text import TfidfVectorizer

df['genres'] = df['genres'].fillna('')

tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['genres'])

print("TF-IDF matrix shape:", tfidf_matrix.shape)

from sklearn.metrics.pairwise import linear_kernel

cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

indices = pd.Series(df.index, index=df['movie_title']).drop_duplicates()

def content_based_recommendations(title, cosine_sim=cosine_sim):
    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:6]  # top 5
    movie_indices = [i[0] for i in sim_scores]
    return df['movie_title'].iloc[movie_indices]

def content_based_recommendations(title, cosine_sim=cosine_sim):
    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx].flatten()))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:6]  # top 5 recommendations
    movie_indices = [i[0] for i in sim_scores]
    return df['movie_title'].iloc[movie_indices]

movie_df = df[['movie_title']].drop_duplicates().reset_index(drop=True)

genre_map = {
    "Toy Story": "Animation Adventure Children",
    "Jumanji": "Adventure Children Fantasy",
    "Grumpier Old Men": "Comedy Romance"
}
movie_df['genres'] = movie_df['movie_title'].map(genre_map)

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(movie_df['genres'])

cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

indices = pd.Series(movie_df.index, index=movie_df['movie_title']).drop_duplicates()

def content_based_recommendations(title, cosine_sim=cosine_sim):
    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx].flatten()))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:6]  # top 5
    movie_indices = [i[0] for i in sim_scores]
    return movie_df['movie_title'].iloc[movie_indices]

"""CONTENT BASED FILTERING"""

print(content_based_recommendations('Toy Story'))

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

# Sample data
df = pd.DataFrame({
    'movie_title': ['Toy Story', 'Jumanji', 'Grumpier Old Men'],
    'genres': ['Animation Adventure Children', 'Adventure Children Fantasy', 'Comedy Romance']
})

# TF-IDF
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['genres'])

# Cosine similarity
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

# Map movie titles to index
indices = pd.Series(df.index, index=df['movie_title']).drop_duplicates()

# Recommendation function
def cb_recommend(title, cosine_sim=cosine_sim):
    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx].flatten()))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:4]
    movie_indices = [i[0] for i in sim_scores]
    return df['movie_title'].iloc[movie_indices]

# Test
print(cb_recommend('Toy Story'))

# Sample ratings
ratings = pd.DataFrame({
    'user_id': [1,1,2,2,3],
    'movie_title': ['Toy Story','Jumanji','Toy Story','Grumpier Old Men','Jumanji'],
    'rating': [5,3,4,5,4]
})

user_item_matrix = ratings.pivot_table(index='user_id', columns='movie_title', values='rating')

# Compute user similarity
user_sim = user_item_matrix.T.corr()  # simple item-item similarity for demonstration

print(user_item_matrix)
print(user_sim)

"""HYBRID RECOMENDER"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel


ratings = pd.DataFrame({
    'user_id': [1,1,2,2,3],
    'movie_title': ['Toy Story','Jumanji','Toy Story','Grumpier Old Men','Jumanji'],
    'rating': [5,3,4,5,4]
})

# Unique movies with genres (mocked for demo)
movies = pd.DataFrame({
    'movie_title': ['Toy Story','Jumanji','Grumpier Old Men'],
    'genres': ['Animation Adventure Children',
               'Adventure Children Fantasy',
               'Comedy Romance']
})


# Clean movie titles


movies['movie_title'] = movies['movie_title'].str.strip().str.replace(r'\s+', ' ', regex=True)
ratings['movie_title'] = ratings['movie_title'].str.strip().str.replace(r'\s+', ' ', regex=True)


# Content-Based Filtering (CBF)


tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(movies['genres'])
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)
indices = pd.Series(movies.index, index=movies['movie_title']).drop_duplicates()

def cb_score(movie):
    idx = indices[movie]
    return pd.Series(cosine_sim[idx], index=movies['movie_title'])


#  Collaborative Filtering (CF)


user_item = ratings.pivot_table(index='user_id', columns='movie_title', values='rating')
user_mean = user_item.mean(axis=1)
user_item_norm = user_item.sub(user_mean, axis=0).fillna(0)

def cf_score(user_id):
    if user_id not in user_item.index:
        return pd.Series([0]*len(user_item.columns), index=user_item.columns)

    user_ratings = user_item_norm.loc[user_id]
    item_sim = user_item_norm.T.corr()

    # Align movies
    common_movies = item_sim.index.intersection(user_ratings.index)
    scores = item_sim.loc[common_movies, common_movies].dot(user_ratings[common_movies])
    scores /= item_sim.loc[common_movies, common_movies].sum()

    return scores.reindex(user_item.columns).fillna(0)


# Hybrid Recommender


def hybrid_recommend(user_id, movie, alpha=0.5):
    cb = cb_score(movie)
    cf = cf_score(user_id)
    hybrid = alpha*cb + (1-alpha)*cf
    return hybrid.sort_values(ascending=False).index.tolist()[1:6]  # top 5

"""TESTING"""

print("Hybrid Recommendations for User 1 for 'Toy Story':")
print(hybrid_recommend(user_id=1, movie='Toy Story'))

genres_data = {
    "Toy  Story": "Animation|Comedy",
    "Jumanji": "Adventure|Children",
    "Grumpier Old Men": "Romance|Comedy"
}

df["genres"] = df["movie_title"].map(genres_data)
df["genres"] = df["genres"].fillna("")

df.to_csv("movies_with_genres.csv", index=False)
print("\nCSV with genres saved successfully as 'movies_with_genres.csv'")